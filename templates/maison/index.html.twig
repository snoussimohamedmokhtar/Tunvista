{% extends 'back.html.twig' %}

{% block title %}Maison index{% endblock %}

{% block body %}
    <h1>Maison index</h1>
    <li>
        <a class="btn btn-success" href="{{ path('app_maison_pdf') }}">PDF</a>
        <script type="text/javascript">
            function imprimer_page() {
                window.print();
            }
        </script>
    </li>
    <form action=""  method="GET">
        <input type="text" name="nom" placeholder="Nom">
        <button type="submit">Rechercher</button>
    </form>
    <table class="table">
        <thead>
            <tr>
                <th style="color: rgb(46, 149, 204);">RefB</th>
                <th style="color: rgb(46, 149, 204);">Nom   
                    <button type="button" id="sort-by-name-asc" class="icon"><i class="fas fa-sort-up"></i></button>
                    <button type="button" id="sort-by-name-desc" class="icon"><i class="fas fa-sort-down"></i></button> 
                </th>
                <th style="color: rgb(46, 149, 204);">Adresse
                    <button type="button" id="sort-by-adresse-asc" class="icon"><i class="fas fa-sort-up"></i></button>
                    <button type="button" id="sort-by-adresse-desc" class="icon"><i class="fas fa-sort-down"></i></button>
                </th>
                <th style="color: rgb(46, 149, 204);" >NombreChambre
                    <button type="button" id="sort-by-nbrChambre-asc" class="icon"><i class="fas fa-sort-up"></i></button>
                    <button type="button" id="sort-by-nbrChambre-desc" class="icon"><i class="fas fa-sort-down"></i></button>
                </th>
                <th style="color: rgb(46, 149, 204);">Prix  
                    <button type="button" id="sort-by-price-asc" class="icon"><i class="fas fa-sort-up"></i></button>
                    <button type="button" id="sort-by-price-desc" class="icon"><i class="fas fa-sort-down"></i></button>
                </th>
                <th style="color: rgb(46, 149, 204);">Type</th>
                <th style="color: rgb(46, 149, 204);">Image</th>
                <th style="color: rgb(46, 149, 204);">actions</th>
            </tr>
        </thead>
        <tbody>
        {% for maison in maisons %}
            <tr>
                <td>{{ maison.refB }}</td>
                <td>{{ maison.nom }}</td>
                <td>{{ maison.adresse }}</td>
                <td>{{ maison.nombreChambre }}</td>
                <td>{{ maison.prix }}</td>
                <td>{{ maison.type }}</td>
                <td>{{ maison.image }}</td>
                <td>
                    <a href="{{ path('app_maison_show', {'refB': maison.refB}) }}"><i class="fas fa-eye"></i>show</a>
                    <a href="{{ path('app_maison_edit', {'refB': maison.refB}) }}"><i class="fas fa-edit"></i>edit</a>
                </td> 
                <td>  <a href="{{ path('app_maison_delete', {'refB': maison.refB}) }}" style="color: rgb(182, 34, 34);">delete</a>
                </td>
            </tr>
        {% else %}
            <tr>
                <td colspan="7">no records found</td>
            </tr>
        {% endfor %}
        </tbody>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const searchInput = document.getElementById('search-input');
                const rows = document.querySelectorAll('.table tbody tr');
        
                searchInput.addEventListener('input', function() {
                    const searchTerm = searchInput.value.toLowerCase().trim();
        
                    rows.forEach(row => {
                        const refB = row.querySelector('td:first-child').textContent.toLowerCase();
                        const name = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                        const adresse = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
                        const type = row.querySelector('td:nth-child(6)').textContent.toLowerCase();
                        const prix = row.querySelector('td:nth-child(5)').textContent.toLowerCase();
        
                        if (refB.includes(searchTerm) || name.includes(searchTerm) || adresse.includes(searchTerm) || type.includes(searchTerm) || prix.includes(searchTerm)) {
                            row.style.display = '';
                        } else {
                            row.style.display = 'none';
                        }
                    });
                });
            });
        </script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Sélection des boutons de tri
                const sortByPriceAscBtn = document.getElementById('sort-by-price-asc');
                const sortByPriceDescBtn = document.getElementById('sort-by-price-desc');
                // Sélection des lignes de la table
                const rows = document.querySelectorAll('.table tbody tr');
        
                // Fonction de tri par prix ascendant
                function sortByPriceAsc() {
                    const sortedRows = Array.from(rows).sort((a, b) => {
                        const priceA = parseFloat(a.querySelector('td:nth-child(5)').textContent);
                        const priceB = parseFloat(b.querySelector('td:nth-child(5)').textContent);
                        return priceA - priceB;
                    });
                    updateTable(sortedRows);
                }
        
                // Fonction de tri par prix descendant
                function sortByPriceDesc() {
                    const sortedRows = Array.from(rows).sort((a, b) => {
                        const priceA = parseFloat(a.querySelector('td:nth-child(5)').textContent);
                        const priceB = parseFloat(b.querySelector('td:nth-child(5)').textContent);
                        return priceB - priceA;
                    });
                    updateTable(sortedRows);
                }
        
                // Mettre à jour le tableau avec les lignes triées
                function updateTable(sortedRows) {
                    const tbody = document.querySelector('.table tbody');
                    tbody.innerHTML = '';
                    sortedRows.forEach(row => {
                        tbody.appendChild(row);
                    });
                }
        
                // Gestionnaire d'événement pour le tri ascendant par prix
                sortByPriceAscBtn.addEventListener('click', sortByPriceAsc);
        
                // Gestionnaire d'événement pour le tri descendant par prix
                sortByPriceDescBtn.addEventListener('click', sortByPriceDesc);
            });
        </script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Sélection des boutons de tri
                const sortByNbrChambreAscBtn = document.getElementById('sort-by-nbrChambre-asc');
                const sortByNbrChambreDescBtn = document.getElementById('sort-by-nbrChambre-desc');
                const sortByNameAscBtn = document.getElementById('sort-by-name-asc');
                const sortByNameDescBtn = document.getElementById('sort-by-name-desc');
                const sortByAdresseAscBtn = document.getElementById('sort-by-adresse-asc');
                const sortByAdresseDescBtn = document.getElementById('sort-by-adresse-desc');
        
                // Sélection des lignes de la table
                const rows = document.querySelectorAll('.table tbody tr');
        
                // Fonction de tri générique
                function sortByColumn(index, asc) {
                    const sortedRows = Array.from(rows).sort((a, b) => {
                        let valueA = a.querySelector(`td:nth-child(${index})`).textContent.toLowerCase().trim();
                        let valueB = b.querySelector(`td:nth-child(${index})`).textContent.toLowerCase().trim();
        
                        // Si c'est un nombre, convertir en nombre avant de comparer
                        if (!isNaN(valueA) && !isNaN(valueB)) {
                            valueA = parseFloat(valueA);
                            valueB = parseFloat(valueB);
                        }
        
                        if (asc) {
                            if (valueA > valueB) return 1;
                            if (valueA < valueB) return -1;
                        } else {
                            if (valueA < valueB) return 1;
                            if (valueA > valueB) return -1;
                        }
                        return 0;
                    });
                    updateTable(sortedRows);
                }
        
                // Mettre à jour le tableau avec les lignes triées
                function updateTable(sortedRows) {
                    const tbody = document.querySelector('.table tbody');
                    tbody.innerHTML = '';
                    sortedRows.forEach(row => {
                        tbody.appendChild(row);
                    });
                }
        
                // Gestionnaires d'événements pour le tri par nombre de chambres
                sortByNbrChambreAscBtn.addEventListener('click', function() {
                    sortByColumn(4, true);
                });
        
                sortByNbrChambreDescBtn.addEventListener('click', function() {
                    sortByColumn(4, false);
                });
        
                // Gestionnaires d'événements pour le tri par nom
                sortByNameAscBtn.addEventListener('click', function() {
                    sortByColumn(2, true);
                });
        
                sortByNameDescBtn.addEventListener('click', function() {
                    sortByColumn(2, false);
                });
        
                // Gestionnaires d'événements pour le tri par adresse
                sortByAdresseAscBtn.addEventListener('click', function() {
                    sortByColumn(3, true);
                });
        
                sortByAdresseDescBtn.addEventListener('click', function() {
                    sortByColumn(3, false);
                });
            });
        </script>
        <script>
            document.getElementById('generate-pdf').addEventListener('click', function() {
                const pdf = new jsPDF();
        
                // Fonction pour ajouter une page au PDF
                function addPageToPDF() {
                    // Collecte le contenu de la page
                    const content = document.querySelector('.container').innerHTML;
        
                    // Ajoute le contenu à la page PDF
                    pdf.text(content, 10, 10);
        
                    // Enregistre le PDF
                    pdf.save('bien.pdf');
                }
        
                // Ajoute une page au PDF
                addPageToPDF();
            });
        </script>
    </table>

    <a href="{{ path('app_maison_new') }}">Create new</a>

    <section class="section">
        <div class="container">
            <div class="row">
                <div class="col-lg-11 offset-lg-2">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Bar Chart - maisons per Address</h5>
    
                            <!-- Bar Chart -->
                            <canvas id="barChart" style="max-height: 400px;"></canvas>
                            <script>
                                document.addEventListener("DOMContentLoaded", () => {
                                    // Extract addresses and pharmacy counts from PHP data
                                    const adresses = [];
                                    const maisonCounts = [];
                                    {% for adresse, count in maisonsPerAdresse %}
                                        adresses.push("{{ adresse }}");
                                        maisonCounts.push({{ count }});
                                    {% endfor %}
    
                                    // Create Bar Chart
                                    new Chart(document.querySelector('#barChart'), {
                                        type: 'bar',
                                        data: {
                                            labels: adresses,
                                            datasets: [{
                                                label: 'maisonsPerAddress',
                                                data: maisonCounts,
                                                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                                borderColor: 'rgb(75, 192, 192)',
                                                borderWidth: 1
                                            }]
                                        },
                                        options: {
                                            scales: {
                                                y: {
                                                    beginAtZero: true
                                                }
                                            }
                                        }
                                    });
                                });
                            </script>
                            <!-- End Bar Chart -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
{% endblock %}
